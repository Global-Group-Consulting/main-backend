import Queue from '../../providers/Queue'

export {QueueJob} from "./QueueJob"

export type QueuesList =
  "send_email"
  | "trigger_users_recapitalization" // Loop each USER and add the job "user_recapitalization" and others for the agent
  | "trigger_commissions_block_month" // Loop each AGENT and add the job "agent_commissions_block" that will reset the agent commissions

  | "user_initialize_movements"
  | "user_recapitalization" // Recapitalize the users interests
  | "user_recapitalization_brites" // Generate brites for user recapitalization

  | "agent_commissions_on_new_deposit" // Commission generated by a user new deposit
  | "agent_commissions_block" // For an agent, close the month and reset the commissions, by storing the amount that must be reinvested
  | "agent_commissions_reinvest" // For an agent, reinvest the available commissions from the past month
  | "agent_commissions_on_total_deposit" // For the reference agent, calculate the commissions based on the user's new deposit

export type QueueConfig = {
  name?: string,
  options?: {
    concurrency?: number
    /** @see https://github.com/agenda/agenda#defining-job-processors */
    priority?: "lowest" | "low" | "normal" | "high" | "highest" | number,
    lockLimit?: number
  },
  action?: string
}

export type QueuesListConfig = Record<QueuesList, QueueConfig>

export type RecursiveJob = {
  queue: QueuesList,
  recursion: string
}

export interface QueueFileConfig {
  jobsPath: string,
  queuesList: QueuesListConfig,
  recursiveJobs: [RecursiveJob]
}

export interface IQueue extends Queue {

}


declare global {
  namespace QueueProvider {
    type Config = QueueConfig
    type Job = QueueJob
    type List = QueuesList
  }
}
